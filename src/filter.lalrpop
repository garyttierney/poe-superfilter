
use ast;
use ast::numbers::ValueExpression;

use ast::block_statements as stm;
use ast::Node;
use tok::Location as TokenLocation;
use tok::Tok;
use arena::TypedArena;

#[LALR]
grammar<'ast>(arena: &'ast TypedArena<Node<'ast>>);

extern {
    type Location = TokenLocation;
    type Error = char;

    enum Tok {
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "-" => Tok::Minus,
        "+" => Tok::Plus,
        "*" => Tok::Times,
        "/" => Tok::Div,
        "," => Tok::Comma,
        "\n" => Tok::NewLine,
        "Show" => Tok::Show,
        "Hide" => Tok::Hide,
        "Mixin" => Tok::Mixin,
        "Import" => Tok::Import,
        ">=" => Tok::Gte,
        ">" => Tok::Gt,
        "<=" => Tok::Lte,
        "<" => Tok::Lt,
        "=" => Tok::Eql,
        Num => Tok::Num(<i64>),
        Float => Tok::Float(<f64>),
        QuotedStrLiteral => Tok::StrLiteral(<String>),
        Constant => Tok::Constant(<String>),
        VarIdentifier => Tok::VarIdentifier(<String>)
    }
}

pub Filter : &'ast Node<'ast> = {
    <defs:DefinitionBlock*> <first:ContentBlock> <rest:AnyBlock*> => {
        let mut nodes = defs;
        nodes.push(first);
        nodes.extend(rest);
        arena.alloc(Node::Filter(ast::Filter { nodes: nodes, transformed_arena: TypedArena::new() }))
    },
    DefinitionBlock* => arena.alloc(Node::Filter(
        ast::Filter { nodes: <>, transformed_arena: TypedArena::new() }
    )),
};

DefinitionBlock : &'ast Node<'ast> = {
    VarDefinition => arena.alloc(Node::VarDefinition(<>)),
    ImportBlock
};

ImportBlock : &'ast Node<'ast> = "Import" <StrLiteral> "\n" => arena.alloc(Node::Block(ast::block::Block::Import(<>)));

ContentBlock : &'ast Node<'ast> = {
    "Show" "\n" <Statement*> => arena.alloc(Node::Block(
        ast::block::Block::Show(<>)
    )),
    "Hide" "\n" <Statement*> => arena.alloc(Node::Block(
        ast::block::Block::Hide(<>)
    )),
    "Mixin" <name:Constant> <args:("(" <Comma<VarIdentifier>> ")")?> "\n" <instructions:Statement*> => {
        let params = args
            .unwrap_or(vec![])
            .iter()
            .map(|param_name| ast::mixin::Param { name: param_name.clone(), default: None })
            .collect();
        arena.alloc(Node::Mixin(
            ast::mixin::Mixin{
                name: name,
                parameters: params,
                statements: instructions
            }
        ))
    }
};

AnyBlock : &'ast Node<'ast> = { ImportBlock, ContentBlock };

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

VarDefinition : ast::var::VarDefinition<'ast>  = {
    <id:VarIdentifier> "=" <v:Value+> "\n" => ast::var::VarDefinition {
        identifier: id,
        values: v
    }
};

VarReference : &'ast Node<'ast> = {
    VarIdentifier => arena.alloc(Node::VarRef(
        ast::var::VarReference { identifier: <> }
    ))
};

SetValueStmt : &'ast Node<'ast> = {
    <n:Constant> <val:Value+> "\n" => arena.alloc(Node::SetValueStmt(
        stm::SetValueStatement {
            name: n,
            values: val
        }
    ))
};

ConditionStmt : &'ast Node<'ast> = {
    <n: Constant> <cond: Condition> "\n" => arena.alloc(Node::ConditionStmt(
        stm::ConditionStatement {
            name: n,
            condition: cond
        }
    ))
};

MixinCall : &'ast Node<'ast> = {
    "+" <n:Constant> <params:("(" <Comma<Value>> ")")?> "\n" => arena.alloc(Node::MixinCall(
        ast::mixin::MixinCall {
            name: n,
            parameters: params.unwrap_or(vec![])
}
    ))
};

Statement : &'ast Node<'ast> = {
    SetValueStmt,
    ConditionStmt,
    MixinCall,
    VarDefinition => arena.alloc(Node::VarDefinition(<>)),
};

Value : &'ast Node<'ast> = {
    ValueExpression,
};

StrLiteral : String = {
    QuotedStrLiteral => String::from(<>),
    Constant => String::from(<>),
};

Condition : stm::Condition<'ast> = {
    <op:ComparisonOperator> <v:Value> => stm::Condition { value: v, operator: op }
};

ComparisonOperator : stm::ComparisonOperator = {
    ">=" => stm::ComparisonOperator::Gte,
    ">" =>  stm::ComparisonOperator::Gt,
    "<=" => stm::ComparisonOperator::Lte,
    "<" =>  stm::ComparisonOperator::Lt,
    "=" =>  stm::ComparisonOperator::Eql
};

NumberLiteral : &'ast Node<'ast> = {
    Num => arena.alloc(Node::ValueExpr(
        ValueExpression::Number(ast::numbers::NumberBox::IntValue(<>))
    )),
    Float => arena.alloc(Node::ValueExpr(
        ValueExpression::Number(ast::numbers::NumberBox::Decimal(<>))
    )),
};

ValueExpression : &'ast Node<'ast> = {
    <l:ValueExpression> "+" <r:ValueFactor> => arena.alloc(Node::ValueExpr(
        ValueExpression::Op(l, ast::numbers::NumberOperation::Add, r)
    )),
    <l:ValueExpression> "-" <r:ValueFactor> => arena.alloc(Node::ValueExpr(
        ValueExpression::Op(l, ast::numbers::NumberOperation::Sub, r)
    )),
    ValueFactor
};

ValueFactor : &'ast Node<'ast> = {
    <l:ValueFactor> "*" <r:ValueTerm> => arena.alloc(Node::ValueExpr(
        ValueExpression::Op(l, ast::numbers::NumberOperation::Mul, r)
    )),
    <l:ValueFactor> "/" <r:ValueTerm> => arena.alloc(Node::ValueExpr(
        ValueExpression::Op(l, ast::numbers::NumberOperation::Div, r)
    )),
    ValueTerm
};

ValueTerm : &'ast Node<'ast> = {
    VarReference,
    NumberLiteral,
    StrLiteral => arena.alloc(Node::StringBox(ast::strings::StringBox::Value(<>))),
    "(" <ValueExpression> ")" => <>
};

Color: &'ast Node<'ast> = {
    <r:ValueTerm> <g:ValueTerm> <b:ValueTerm> <a:ValueTerm> => arena.alloc(Node::Color(ast::color::Color {
        r: r,
        g: g,
        b: b,
        a: a
    })),
    <r:ValueTerm> <g:ValueTerm> <b:ValueTerm> => arena.alloc(Node::Color(ast::color::Color {
        r: r,
        g: g,
        b: b,
        a: arena.alloc(Node::ValueExpr(
            ValueExpression::Number(ast::numbers::NumberBox::IntValue(255))
        ))
    }))
};
