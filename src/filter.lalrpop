
use ast;
use tok::Location as TokenLocation;
use tok::Tok;

//#[LALR]
grammar;

extern {
    type Location = TokenLocation;
    type Error = char;

    enum Tok {
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "-" => Tok::Minus,
        "+" => Tok::Plus,
        "*" => Tok::Times,
        "/" => Tok::Div,
        "," => Tok::Comma,
        "\n" => Tok::NewLine,
        "Show" => Tok::Show,
        "Hide" => Tok::Hide,
        "Mixin" => Tok::Mixin,
        "Import" => Tok::Import,
        ">=" => Tok::Gte,
        ">" => Tok::Gt,
        "<=" => Tok::Lte,
        "<" => Tok::Lt,
        "=" => Tok::Eql,
        Num => Tok::Num(<i32>),
        QuotedStrLiteral => Tok::StrLiteral(<String>),
        Constant => Tok::Constant(<String>),
        VarIdentifier => Tok::VarIdentifier(<String>)
    }
}

pub Filter : Box<Vec<ast::Block>> = {
    <defs:DefinitionBlock*> <first:ContentBlock> <rest:AnyBlock*> => {
        let mut v = defs;
        v.push(first);
        v.extend(rest);
        Box::new(v)
    },
    DefinitionBlock* => Box::new(<>),
};

DefinitionBlock : ast::Block = {
    VarDefinition => ast::Block::Var(<>),
    ImportBlock
};

ImportBlock : ast::Block = "Import" <StrLiteral> "\n" => ast::Block::Import(<>);

ContentBlock : ast::Block = {
    "Show" "\n" <Statement*> => ast::Block::Show(<>),
    "Hide" "\n" <Statement*> => ast::Block::Hide(<>),
    "Mixin" <name:Constant> <args:("(" <Comma<VarIdentifier>> ")")?> "\n" <instructions:Statement*> => {
        let params = args
            .unwrap_or(vec![])
            .iter()
            .map(|param_name| ast::Param { name: param_name.clone(), default: None })
            .collect();
        ast::Block::Mixin(
            ast::Mixin{
                name: name,
                parameters: params,
                statements: instructions 
            }
        )
    }
};

AnyBlock : ast::Block = { ImportBlock, ContentBlock };

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

VarDefinition : ast::VarDefinition  = {
    <id:VarIdentifier> "=" <v:Value+> "\n" => ast::VarDefinition { identifier: id, values: v }
};

Statement : ast::Statement = {
    <Constant> <Value+> "\n" => ast::Statement::SetValue(<>),
    <Constant> <Condition> "\n" => ast::Statement::Condition(<>),
    VarDefinition => ast::Statement::Var(<>),
    "+" <n:Constant> <params:("(" <Comma<Value>> ")")?> "\n" => ast::Statement::Include(
        ast::MixinCall { name: n, parameters: params.unwrap_or(vec![]) }
    )
};

Value : ast::Value = {
    NumExpression => ast::Value::Num(<>),
    StringExpression => ast::Value::Str(<>),
    VarIdentifier => ast::Value::Var(<>)
};

StringExpression : ast::StringBox = {
    StrLiteral => ast::StringBox::Value(<>),
};

StrLiteral : String = {
    QuotedStrLiteral => String::from(<>),
    Constant => String::from(<>),
};

Condition : ast::Condition = {
    <op:ComparisonOperator> <v:Value> => ast::Condition { value: v, operator: op }
};

ComparisonOperator : ast::ComparisonOperator = {
    ">=" => ast::ComparisonOperator::Gte,
    ">" => ast::ComparisonOperator::Gt,
    "<=" => ast::ComparisonOperator::Lte,
    "<" => ast::ComparisonOperator::Lt,
    "=" => ast::ComparisonOperator::Eql
};

NumExpression : ast::NumberExpression = {
    <l:NumExpression> "+" <r:NumFactor> => ast::NumberExpression::Op(Box::new(l), ast::NumberOperation::Add, Box::new(r)),
    <l:NumExpression> "-" <r:NumFactor> => ast::NumberExpression::Op(Box::new(l), ast::NumberOperation::Sub, Box::new(r)),
    NumFactor
};

NumFactor : ast::NumberExpression = {
    <l:NumFactor> "*" <r:NumTerm> => ast::NumberExpression::Op(Box::new(l), ast::NumberOperation::Mul, Box::new(r)),
    <l:NumFactor> "/" <r:NumTerm> => ast::NumberExpression::Op(Box::new(l), ast::NumberOperation::Div, Box::new(r)),
    NumTerm
};

NumTerm : ast::NumberExpression = {
    Num => ast::NumberExpression::Number(ast::NumberBox::IntValue(<>)),
    "(" <NumExpression> ")" => <>
};

Color: ast::Color = {
    <r:NumExpression> <g:NumExpression> <b:NumExpression> <a:NumExpression> => ast::Color {
        r: r,
        g: g,
        b: b,
        a: a
    },
    <r:NumExpression> <g:NumExpression> <b:NumExpression> => ast::Color {
        r: r,
        g: g,
        b: b,
        a: ast::NumberExpression::Number(ast::NumberBox::IntValue(255))
    }
};
