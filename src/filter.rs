use ast;
use std::rc::Rc;
use std::path::PathBuf;
use ast::block_statements as stm;
use ast::{Node, AstLocation, Filter};
use ast::block::{Block, BlockType};
use tok::Location as TokenLocation;
use tok::Tok;
use ast::import::ImportStatement;
use ast::var::{VarDefinition,VarReference};
use ast::expression::{ExpressionValue, ExpressionNode, ExpressionOperation};
extern crate lalrpop_util as __lalrpop_util;

mod __parse__Filter {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use ast;
    use std::rc::Rc;
    use std::path::PathBuf;
    use ast::block_statements as stm;
    use ast::{Node, AstLocation, Filter};
    use ast::block::{Block, BlockType};
    use tok::Location as TokenLocation;
    use tok::Tok;
    use ast::import::ImportStatement;
    use ast::var::{VarDefinition,VarReference};
    use ast::expression::{ExpressionValue, ExpressionNode, ExpressionOperation};
    extern crate lalrpop_util as __lalrpop_util;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<> {
        Term_22_28_22(Tok),
        Term_22_29_22(Tok),
        Term_22_2a_22(Tok),
        Term_22_2b_22(Tok),
        Term_22_2c_22(Tok),
        Term_22_2d_22(Tok),
        Term_22_2f_22(Tok),
        Term_22_3c_22(Tok),
        Term_22_3c_3d_22(Tok),
        Term_22_3d_22(Tok),
        Term_22_3e_22(Tok),
        Term_22_3e_3d_22(Tok),
        Term_22False_22(Tok),
        Term_22Hide_22(Tok),
        Term_22Import_22(Tok),
        Term_22Mixin_22(Tok),
        Term_22Show_22(Tok),
        Term_22True_22(Tok),
        Term_22_5c_5cn_22(Tok),
        Term_22if_22(Tok),
        TermConstant(String),
        TermFloat(f64),
        TermNum(i64),
        TermQuotedStrLiteral(String),
        TermVarIdentifier(String),
        Termerror(__lalrpop_util::ErrorRecovery<TokenLocation, Tok, char>),
        Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29(Vec<Node>),
        Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29_3f(::std::option::Option<Vec<Node>>),
        Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29(Vec<String>),
        Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29_3f(::std::option::Option<Vec<String>>),
        Nt_28_22if_22_20_3cValueExpression_3e_29(Node),
        Nt_28_22if_22_20_3cValueExpression_3e_29_3f(::std::option::Option<Node>),
        Nt_28_3cValue_3e_20_22_2c_22_29(Node),
        Nt_28_3cValue_3e_20_22_2c_22_29_2a(::std::vec::Vec<Node>),
        Nt_28_3cValue_3e_20_22_2c_22_29_2b(::std::vec::Vec<Node>),
        Nt_28_3cVarIdentifier_3e_20_22_2c_22_29(String),
        Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2a(::std::vec::Vec<String>),
        Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b(::std::vec::Vec<String>),
        Nt_40L(TokenLocation),
        Nt_40R(TokenLocation),
        NtAnyBlock(Node),
        NtAnyBlock_2a(::std::vec::Vec<Node>),
        NtAnyBlock_2b(::std::vec::Vec<Node>),
        NtBlockType(BlockType),
        NtColor(Node),
        NtComma_3cValue_3e(Vec<Node>),
        NtComma_3cVarIdentifier_3e(Vec<String>),
        NtComparisonOperator(stm::ComparisonOperator),
        NtConditionStmt(Node),
        NtContentBlock(Node),
        NtDefinitionBlock(Node),
        NtDefinitionBlock_2a(::std::vec::Vec<Node>),
        NtDefinitionBlock_2b(::std::vec::Vec<Node>),
        NtExpressionTerm(Node),
        NtFactorExpression(Node),
        NtFilter(Node),
        NtImportBlock(Node),
        NtMixinCall(Node),
        NtNumberLiteral(Node),
        NtRawStrLiteral(String),
        NtSetValueStmt(Node),
        NtStatement(Node),
        NtStatement_2a(::std::vec::Vec<Node>),
        NtStatement_2b(::std::vec::Vec<Node>),
        NtStmCondition(stm::Condition),
        NtStrLiteral(Node),
        NtSumExpression(Node),
        NtValue(Node),
        NtValue_3f(::std::option::Option<Node>),
        NtValueExpression(Node),
        NtValueExpression_2b(::std::vec::Vec<Node>),
        NtVarDefinition(Node),
        NtVarIdentifier_3f(::std::option::Option<String>),
        NtVarReference(Node),
        Nt____Filter(Node),
    }
    const __ACTION: &'static [i32] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, -58, 0, 0, 0, 0, 0, 0, 0, -58, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, -55, -55, -55, 0, 0, 0, 0, 0, 0, 0, -55, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, -54, -54, -54, 0, 0, 0, 0, 0, 0, 0, -54, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 24, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, -28, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, -48, -48, -48, 0, 0, 0, 34, 0, 0, 0, 13, 0,
        // State 14
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, -26, -26, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, -22, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, -59, -59, -59, 0, 0, 0, 0, 0, 0, 0, -59, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, -79, 0, 0, 0, 0, 0, 0, -79, 0, -79, -79, -79, -79, -79, 0,
        // State 23
        -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, -78, 0, 0, 0, 0, 0, 0, -78, 0, -78, -78, -78, -78, -78, 0,
        // State 24
        50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 26
        0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, -82, -82, -82, 0, 0, 0, -82, 0, 0, 0, -82, 0,
        // State 27
        0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, -83, -83, -83, 0, 0, 0, -83, 0, 0, 0, -83, 0,
        // State 28
        0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, -81, -81, -81, 0, 0, 0, -81, 0, 0, 0, -81, 0,
        // State 29
        0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, -87, -87, -87, 0, 0, 0, -87, 0, 0, 0, -87, 0,
        // State 30
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, -49, -49, -49, 0, 0, 0, 34, 0, 0, 0, 13, 0,
        // State 31
        0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, -84, -84, -84, 0, 0, 0, -84, 0, 0, 0, -84, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0,
        // State 33
        43, 0, 0, 0, 0, 0, 0, 60, 61, 62, 63, 64, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 34
        -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, -66, 0, 0, 0, 0, 0, 0, -66, 0, -66, -66, -66, -66, -66, 0,
        // State 35
        -93, -93, 65, -93, -93, -93, 66, -93, -93, -93, -93, -93, 0, 0, 0, 0, 0, 0, -93, 0, -93, -93, -93, -93, -93, 0,
        // State 36
        -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, -61, 0, 0, 0, 0, 0, 0, -61, 0, -61, -61, -61, -61, -61, 0,
        // State 37
        -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, 0, 0, 0, 0, 0, 0, -90, 0, -90, -90, -90, -90, -90, 0,
        // State 38
        -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, 0, 0, 0, 0, 0, 0, -62, 0, -62, -62, -62, -62, -62, 0,
        // State 39
        -98, -98, 0, 67, -98, 68, 0, -98, -98, -98, -98, -98, 0, 0, 0, 0, 0, 0, -98, 0, -98, -98, -98, -98, -98, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 60, 61, 62, 63, 64, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, -60, 0, 0, 0, 0, 0, 0, -60, 0, -60, -60, -60, -60, -60, 0,
        // State 42
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 43
        -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, -77, 0, 0, 0, 0, 0, 0, -77, 0, -77, -77, -77, -77, -77, 0,
        // State 44
        -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, -76, 0, 0, 0, 0, 0, 0, -76, 0, -76, -76, -76, -76, -76, 0,
        // State 45
        -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, -104, 0, 0, 0, 0, 0, 0, -104, 0, -104, -104, -104, -104, -104, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, -27, -27, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, -73, -73, -73, 0, 0, 0, 0, 0, 0, 0, -73, 0,
        // State 49
        0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
        // State 50
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, -52, -52, -52, 0, 0, 0, 34, 0, 0, 0, 13, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        -99, -99, 0, 0, -99, 0, 0, 60, 61, 62, 63, 64, 0, 0, 0, 0, 0, 0, -99, 0, -99, -99, -99, -99, -99, 0,
        // State 53
        43, -94, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 23, 44, 45, 24, 46, 0,
        // State 54
        0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, -88, -88, -88, 0, 0, 0, -88, 0, 0, 0, -88, 0,
        // State 55
        78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, -43, -43, -43, 0,
        // State 60
        -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, -42, -42, -42, 0,
        // State 61
        -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, -44, -44, -44, -44, 0,
        // State 62
        -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, -41, -41, -41, -41, 0,
        // State 63
        -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, -40, -40, -40, -40, 0,
        // State 64
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 65
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 66
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 67
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 68
        43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 69
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, -46, -46, -46, 0, 0, 0, 34, 0, 0, 0, 13, 0,
        // State 70
        0, 89, 0, 0, 0, 0, 0, 60, 61, 62, 63, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
        // State 72
        0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, -36, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, -53, -53, -53, 0, 0, 0, 34, 0, 0, 0, 13, 0,
        // State 75
        0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, -101, -101, -101, 0, 0, 0, -101, 0, 0, 0, -101, 0,
        // State 76
        -100, -100, 0, 0, -100, 0, 0, 60, 61, 62, 63, 64, 0, 0, 0, 0, 0, 0, -100, 0, -100, -100, -100, -100, -100, 0,
        // State 77
        43, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 78
        0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, -75, -75, -75, 0, 0, 0, -75, 0, 0, 0, -75, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 60, 61, 62, 63, 64, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -45, -45, -45, 0, 0, 0, -45, 0, 0, 0, -45, 0,
        // State 81
        0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, -80, -80, 0, 0, 0, -80, 0, 0, 0, -80, 0,
        // State 82
        -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, 0, 0, 0, 0, 0, 0, -64, 0, -64, -64, -64, -64, -64, 0,
        // State 83
        -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, 0, 0, 0, 0, 0, 0, -65, 0, -65, -65, -65, -65, -65, 0,
        // State 84
        -91, -91, 65, -91, -91, -91, 66, -91, -91, -91, -91, -91, 0, 0, 0, 0, 0, 0, -91, 0, -91, -91, -91, -91, -91, 0,
        // State 85
        -92, -92, 65, -92, -92, -92, 66, -92, -92, -92, -92, -92, 0, 0, 0, 0, 0, 0, -92, 0, -92, -92, -92, -92, -92, 0,
        // State 86
        -97, -97, 0, 67, -97, 68, 0, -97, -97, -97, -97, -97, 0, 0, 0, 0, 0, 0, -97, 0, -97, -97, -97, -97, -97, 0,
        // State 87
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, -47, -47, -47, 0, 0, 0, 34, 0, 0, 0, 13, 0,
        // State 88
        -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, 0, 0, 0, 0, 0, 0, -63, 0, -63, -63, -63, -63, -63, 0,
        // State 89
        0, -38, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, -18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, 0,
        // State 92
        43, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 44, 45, 24, 46, 0,
        // State 93
        0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, -32, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0,
        // State 96
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, -50, -50, -50, 0, 0, 0, 34, 0, 0, 0, 13, 0,
        // State 97
        0, -34, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        -13, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, -13, -13, -13, -13, 0,
        // State 100
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, -51, -51, -51, 0, 0, 0, 34, 0, 0, 0, 13, 0,
        // State 101
        -14, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, -14, -14, -14, -14, 0,
        // State 102
        0, 0, 0, -74, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, -74, -74, -74, 0, 0, 0, -74, 0, 0, 0, -74, 0,
    ];
    const __EOF_ACTION: &'static [i32] = &[
        -71,
        0,
        -67,
        -58,
        -72,
        -105,
        -55,
        -54,
        0,
        0,
        0,
        0,
        0,
        -48,
        0,
        -26,
        -69,
        -23,
        -22,
        -68,
        -59,
        0,
        0,
        0,
        0,
        0,
        -82,
        -83,
        -81,
        -87,
        -49,
        -84,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -27,
        -70,
        -73,
        0,
        -52,
        0,
        0,
        0,
        -88,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -46,
        0,
        0,
        0,
        0,
        -53,
        -101,
        0,
        0,
        -75,
        0,
        -45,
        -80,
        0,
        0,
        0,
        0,
        0,
        -47,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -50,
        0,
        0,
        0,
        -51,
        0,
        -74,
    ];
    const __GOTO: &'static [i32] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 4, 0, 5, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 17, 2, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 20, 21, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 29, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 40, 0, 0, 41, 0, 0, 0, 42, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 2, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 48, 2, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 40, 52, 0, 53, 54, 0, 0, 42, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 29, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 58, 39, 40, 59, 0, 53, 54, 0, 0, 42, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 40, 0, 0, 71, 0, 0, 0, 42, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 2, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 29, 30, 0, 75, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 40, 0, 0, 77, 0, 0, 0, 42, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 40, 0, 0, 80, 0, 0, 0, 42, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 42, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 42, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 85, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 42, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 86, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 42, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 87, 0, 0, 0, 0, 0, 0, 42, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 29, 30, 0, 88, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 29, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 40, 95, 0, 53, 54, 0, 0, 42, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 29, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 39, 40, 98, 0, 53, 54, 0, 0, 42, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 29, 30, 0, 101, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 29, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __expected_tokens(__state: usize) -> Vec<::std::string::String> {
        const __TERMINAL: &'static [&'static str] = &[
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""/""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###"">""###,
            r###"">=""###,
            r###""False""###,
            r###""Hide""###,
            r###""Import""###,
            r###""Mixin""###,
            r###""Show""###,
            r###""True""###,
            r###""\\n""###,
            r###""if""###,
            r###"Constant"###,
            r###"Float"###,
            r###"Num"###,
            r###"QuotedStrLiteral"###,
            r###"VarIdentifier"###,
        ];
        __ACTION[(__state * 26)..].iter().zip(__TERMINAL).filter_map(|(&state, terminal)| {
            if state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub fn parse_Filter<
        'a,
        __TOKEN: __ToTriple<'a, Error=char>,
        __TOKENS: IntoIterator<Item=__TOKEN>,
    >(
        file: &'a Rc<PathBuf>,
        __tokens0: __TOKENS,
    ) -> Result<Node, __lalrpop_util::ParseError<TokenLocation, Tok, char>>
    {
        let __tokens = __tokens0.into_iter();
        let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
        let mut __states = vec![0_i32];
        let mut __symbols = vec![];
        let mut __integer;
        let mut __lookahead;
        let mut __last_location = Default::default();
        '__shift: loop {
            __lookahead = match __tokens.next() {
                Some(Ok(v)) => v,
                None => break '__shift,
                Some(Err(e)) => return Err(__lalrpop_util::ParseError::User { error: e }),
            };
            __last_location = __lookahead.2.clone();
            __integer = match __lookahead.1 {
                Tok::LParen if true => 0,
                Tok::RParen if true => 1,
                Tok::Times if true => 2,
                Tok::Plus if true => 3,
                Tok::Comma if true => 4,
                Tok::Minus if true => 5,
                Tok::Div if true => 6,
                Tok::Lt if true => 7,
                Tok::Lte if true => 8,
                Tok::Eql if true => 9,
                Tok::Gt if true => 10,
                Tok::Gte if true => 11,
                Tok::False if true => 12,
                Tok::Hide if true => 13,
                Tok::Import if true => 14,
                Tok::Mixin if true => 15,
                Tok::Show if true => 16,
                Tok::True if true => 17,
                Tok::NewLine if true => 18,
                Tok::If if true => 19,
                Tok::Constant(_) if true => 20,
                Tok::Float(_) if true => 21,
                Tok::Num(_) if true => 22,
                Tok::StrLiteral(_) if true => 23,
                Tok::VarIdentifier(_) if true => 24,
                _ => {
                    let __state = *__states.last().unwrap() as usize;
                    let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                        token: Some(__lookahead),
                        expected: __expected_tokens(__state),
                    };
                    return Err(__error);
                }
            };
            '__inner: loop {
                let __state = *__states.last().unwrap() as usize;
                let __action = __ACTION[__state * 26 + __integer];
                if __action > 0 {
                    let __symbol = match __integer {
                        0 => match __lookahead.1 {
                            __tok @ Tok::LParen => __Symbol::Term_22_28_22(__tok),
                            _ => unreachable!(),
                        },
                        1 => match __lookahead.1 {
                            __tok @ Tok::RParen => __Symbol::Term_22_29_22(__tok),
                            _ => unreachable!(),
                        },
                        2 => match __lookahead.1 {
                            __tok @ Tok::Times => __Symbol::Term_22_2a_22(__tok),
                            _ => unreachable!(),
                        },
                        3 => match __lookahead.1 {
                            __tok @ Tok::Plus => __Symbol::Term_22_2b_22(__tok),
                            _ => unreachable!(),
                        },
                        4 => match __lookahead.1 {
                            __tok @ Tok::Comma => __Symbol::Term_22_2c_22(__tok),
                            _ => unreachable!(),
                        },
                        5 => match __lookahead.1 {
                            __tok @ Tok::Minus => __Symbol::Term_22_2d_22(__tok),
                            _ => unreachable!(),
                        },
                        6 => match __lookahead.1 {
                            __tok @ Tok::Div => __Symbol::Term_22_2f_22(__tok),
                            _ => unreachable!(),
                        },
                        7 => match __lookahead.1 {
                            __tok @ Tok::Lt => __Symbol::Term_22_3c_22(__tok),
                            _ => unreachable!(),
                        },
                        8 => match __lookahead.1 {
                            __tok @ Tok::Lte => __Symbol::Term_22_3c_3d_22(__tok),
                            _ => unreachable!(),
                        },
                        9 => match __lookahead.1 {
                            __tok @ Tok::Eql => __Symbol::Term_22_3d_22(__tok),
                            _ => unreachable!(),
                        },
                        10 => match __lookahead.1 {
                            __tok @ Tok::Gt => __Symbol::Term_22_3e_22(__tok),
                            _ => unreachable!(),
                        },
                        11 => match __lookahead.1 {
                            __tok @ Tok::Gte => __Symbol::Term_22_3e_3d_22(__tok),
                            _ => unreachable!(),
                        },
                        12 => match __lookahead.1 {
                            __tok @ Tok::False => __Symbol::Term_22False_22(__tok),
                            _ => unreachable!(),
                        },
                        13 => match __lookahead.1 {
                            __tok @ Tok::Hide => __Symbol::Term_22Hide_22(__tok),
                            _ => unreachable!(),
                        },
                        14 => match __lookahead.1 {
                            __tok @ Tok::Import => __Symbol::Term_22Import_22(__tok),
                            _ => unreachable!(),
                        },
                        15 => match __lookahead.1 {
                            __tok @ Tok::Mixin => __Symbol::Term_22Mixin_22(__tok),
                            _ => unreachable!(),
                        },
                        16 => match __lookahead.1 {
                            __tok @ Tok::Show => __Symbol::Term_22Show_22(__tok),
                            _ => unreachable!(),
                        },
                        17 => match __lookahead.1 {
                            __tok @ Tok::True => __Symbol::Term_22True_22(__tok),
                            _ => unreachable!(),
                        },
                        18 => match __lookahead.1 {
                            __tok @ Tok::NewLine => __Symbol::Term_22_5c_5cn_22(__tok),
                            _ => unreachable!(),
                        },
                        19 => match __lookahead.1 {
                            __tok @ Tok::If => __Symbol::Term_22if_22(__tok),
                            _ => unreachable!(),
                        },
                        20 => match __lookahead.1 {
                            Tok::Constant(__tok0) => __Symbol::TermConstant(__tok0),
                            _ => unreachable!(),
                        },
                        21 => match __lookahead.1 {
                            Tok::Float(__tok0) => __Symbol::TermFloat(__tok0),
                            _ => unreachable!(),
                        },
                        22 => match __lookahead.1 {
                            Tok::Num(__tok0) => __Symbol::TermNum(__tok0),
                            _ => unreachable!(),
                        },
                        23 => match __lookahead.1 {
                            Tok::StrLiteral(__tok0) => __Symbol::TermQuotedStrLiteral(__tok0),
                            _ => unreachable!(),
                        },
                        24 => match __lookahead.1 {
                            Tok::VarIdentifier(__tok0) => __Symbol::TermVarIdentifier(__tok0),
                            _ => unreachable!(),
                        },
                        _ => unreachable!(),
                    };
                    __states.push(__action - 1);
                    __symbols.push((__lookahead.0, __symbol, __lookahead.2));
                    continue '__shift;
                } else if __action < 0 {
                    if let Some(r) = __reduce(file, __action, Some(&__lookahead.0), &mut __states, &mut __symbols, ::std::marker::PhantomData::<()>) {
                        return r;
                    }
                } else {
                    let __state = *__states.last().unwrap() as usize;
                    let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                        token: Some(__lookahead),
                        expected: __expected_tokens(__state),
                    };
                    return Err(__error)
                }
            }
        }
        loop {
            let __state = *__states.last().unwrap() as usize;
            let __action = __EOF_ACTION[__state];
            if __action < 0 {
                if let Some(r) = __reduce(file, __action, None, &mut __states, &mut __symbols, ::std::marker::PhantomData::<()>) {
                    return r;
                }
            } else {
                let __state = *__states.last().unwrap() as usize;
                let __error = __lalrpop_util::ParseError::UnrecognizedToken {
                    token: None,
                    expected: __expected_tokens(__state),
                };
                return Err(__error);
            }
        }
    }
    pub fn __reduce<
        'a,
    >(
        file: &'a Rc<PathBuf>,
        __action: i32,
        __lookahead_start: Option<&TokenLocation>,
        __states: &mut ::std::vec::Vec<i32>,
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<Node,__lalrpop_util::ParseError<TokenLocation, Tok, char>>>
    {
        let __nonterminal = match -__action {
            1 => {
                // ("(" <Comma<Value>> ")") = "(", Comma<Value>, ")" => ActionFn(51);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtComma_3cValue_3e(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action51::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29(__nt), __end));
                0
            }
            2 => {
                // ("(" <Comma<Value>> ")")? = "(", Comma<Value>, ")" => ActionFn(88);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtComma_3cValue_3e(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action88::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29_3f(__nt), __end));
                1
            }
            3 => {
                // ("(" <Comma<Value>> ")")? =  => ActionFn(50);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action50::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29_3f(__nt), __end));
                1
            }
            4 => {
                // ("(" <Comma<VarIdentifier>> ")") = "(", Comma<VarIdentifier>, ")" => ActionFn(55);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtComma_3cVarIdentifier_3e(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action55::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29(__nt), __end));
                2
            }
            5 => {
                // ("(" <Comma<VarIdentifier>> ")")? = "(", Comma<VarIdentifier>, ")" => ActionFn(91);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtComma_3cVarIdentifier_3e(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action91::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29_3f(__nt), __end));
                3
            }
            6 => {
                // ("(" <Comma<VarIdentifier>> ")")? =  => ActionFn(54);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action54::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29_3f(__nt), __end));
                3
            }
            7 => {
                // ("if" <ValueExpression>) = "if", ValueExpression => ActionFn(61);
                let __sym1 = __pop_NtValueExpression(__symbols);
                let __sym0 = __pop_Term_22if_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action61::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_22if_22_20_3cValueExpression_3e_29(__nt), __end));
                4
            }
            8 => {
                // ("if" <ValueExpression>)? = "if", ValueExpression => ActionFn(94);
                let __sym1 = __pop_NtValueExpression(__symbols);
                let __sym0 = __pop_Term_22if_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action94::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_22if_22_20_3cValueExpression_3e_29_3f(__nt), __end));
                5
            }
            9 => {
                // ("if" <ValueExpression>)? =  => ActionFn(60);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action60::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::Nt_28_22if_22_20_3cValueExpression_3e_29_3f(__nt), __end));
                5
            }
            10 => {
                // (<Value> ",") = Value, "," => ActionFn(83);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtValue(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action83::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cValue_3e_20_22_2c_22_29(__nt), __end));
                6
            }
            11 => {
                // (<Value> ",")* =  => ActionFn(81);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action81::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::Nt_28_3cValue_3e_20_22_2c_22_29_2a(__nt), __end));
                7
            }
            12 => {
                // (<Value> ",")* = (<Value> ",")+ => ActionFn(82);
                let __sym0 = __pop_Nt_28_3cValue_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action82::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::Nt_28_3cValue_3e_20_22_2c_22_29_2a(__nt), __end));
                7
            }
            13 => {
                // (<Value> ",")+ = Value, "," => ActionFn(97);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_NtValue(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action97::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cValue_3e_20_22_2c_22_29_2b(__nt), __end));
                8
            }
            14 => {
                // (<Value> ",")+ = (<Value> ",")+, Value, "," => ActionFn(98);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_NtValue(__symbols);
                let __sym0 = __pop_Nt_28_3cValue_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action98::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_3cValue_3e_20_22_2c_22_29_2b(__nt), __end));
                8
            }
            15 => {
                // (<VarIdentifier> ",") = VarIdentifier, "," => ActionFn(78);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_TermVarIdentifier(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action78::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cVarIdentifier_3e_20_22_2c_22_29(__nt), __end));
                9
            }
            16 => {
                // (<VarIdentifier> ",")* =  => ActionFn(76);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action76::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2a(__nt), __end));
                10
            }
            17 => {
                // (<VarIdentifier> ",")* = (<VarIdentifier> ",")+ => ActionFn(77);
                let __sym0 = __pop_Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action77::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2a(__nt), __end));
                10
            }
            18 => {
                // (<VarIdentifier> ",")+ = VarIdentifier, "," => ActionFn(101);
                let __sym1 = __pop_Term_22_2c_22(__symbols);
                let __sym0 = __pop_TermVarIdentifier(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action101::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b(__nt), __end));
                11
            }
            19 => {
                // (<VarIdentifier> ",")+ = (<VarIdentifier> ",")+, VarIdentifier, "," => ActionFn(102);
                let __sym2 = __pop_Term_22_2c_22(__symbols);
                let __sym1 = __pop_TermVarIdentifier(__symbols);
                let __sym0 = __pop_Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action102::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b(__nt), __end));
                11
            }
            20 => {
                // @L =  => ActionFn(67);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action67::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::Nt_40L(__nt), __end));
                12
            }
            21 => {
                // @R =  => ActionFn(62);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action62::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::Nt_40R(__nt), __end));
                13
            }
            22 => {
                // AnyBlock = ImportBlock => ActionFn(10);
                let __sym0 = __pop_NtImportBlock(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action10::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtAnyBlock(__nt), __end));
                14
            }
            23 => {
                // AnyBlock = ContentBlock => ActionFn(11);
                let __sym0 = __pop_NtContentBlock(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action11::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtAnyBlock(__nt), __end));
                14
            }
            24 => {
                // AnyBlock* =  => ActionFn(63);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action63::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::NtAnyBlock_2a(__nt), __end));
                15
            }
            25 => {
                // AnyBlock* = AnyBlock+ => ActionFn(64);
                let __sym0 = __pop_NtAnyBlock_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action64::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtAnyBlock_2a(__nt), __end));
                15
            }
            26 => {
                // AnyBlock+ = AnyBlock => ActionFn(70);
                let __sym0 = __pop_NtAnyBlock(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action70::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtAnyBlock_2b(__nt), __end));
                16
            }
            27 => {
                // AnyBlock+ = AnyBlock+, AnyBlock => ActionFn(71);
                let __sym1 = __pop_NtAnyBlock(__symbols);
                let __sym0 = __pop_NtAnyBlock_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action71::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtAnyBlock_2b(__nt), __end));
                16
            }
            28 => {
                // BlockType = "Show" => ActionFn(6);
                let __sym0 = __pop_Term_22Show_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action6::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtBlockType(__nt), __end));
                17
            }
            29 => {
                // BlockType = "Hide" => ActionFn(7);
                let __sym0 = __pop_Term_22Hide_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action7::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtBlockType(__nt), __end));
                17
            }
            30 => {
                // Color = ExpressionTerm, ExpressionTerm, ExpressionTerm, ExpressionTerm => ActionFn(45);
                let __sym3 = __pop_NtExpressionTerm(__symbols);
                let __sym2 = __pop_NtExpressionTerm(__symbols);
                let __sym1 = __pop_NtExpressionTerm(__symbols);
                let __sym0 = __pop_NtExpressionTerm(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action45::<>(file, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtColor(__nt), __end));
                18
            }
            31 => {
                // Color = ExpressionTerm, ExpressionTerm, ExpressionTerm => ActionFn(122);
                let __sym2 = __pop_NtExpressionTerm(__symbols);
                let __sym1 = __pop_NtExpressionTerm(__symbols);
                let __sym0 = __pop_NtExpressionTerm(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action122::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtColor(__nt), __end));
                18
            }
            32 => {
                // Comma<Value> = Value => ActionFn(155);
                let __sym0 = __pop_NtValue(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action155::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComma_3cValue_3e(__nt), __end));
                19
            }
            33 => {
                // Comma<Value> =  => ActionFn(156);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action156::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::NtComma_3cValue_3e(__nt), __end));
                19
            }
            34 => {
                // Comma<Value> = (<Value> ",")+, Value => ActionFn(157);
                let __sym1 = __pop_NtValue(__symbols);
                let __sym0 = __pop_Nt_28_3cValue_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action157::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtComma_3cValue_3e(__nt), __end));
                19
            }
            35 => {
                // Comma<Value> = (<Value> ",")+ => ActionFn(158);
                let __sym0 = __pop_Nt_28_3cValue_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action158::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComma_3cValue_3e(__nt), __end));
                19
            }
            36 => {
                // Comma<VarIdentifier> = VarIdentifier => ActionFn(159);
                let __sym0 = __pop_TermVarIdentifier(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action159::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComma_3cVarIdentifier_3e(__nt), __end));
                20
            }
            37 => {
                // Comma<VarIdentifier> =  => ActionFn(160);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action160::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::NtComma_3cVarIdentifier_3e(__nt), __end));
                20
            }
            38 => {
                // Comma<VarIdentifier> = (<VarIdentifier> ",")+, VarIdentifier => ActionFn(161);
                let __sym1 = __pop_TermVarIdentifier(__symbols);
                let __sym0 = __pop_Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action161::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtComma_3cVarIdentifier_3e(__nt), __end));
                20
            }
            39 => {
                // Comma<VarIdentifier> = (<VarIdentifier> ",")+ => ActionFn(162);
                let __sym0 = __pop_Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action162::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComma_3cVarIdentifier_3e(__nt), __end));
                20
            }
            40 => {
                // ComparisonOperator = ">=" => ActionFn(25);
                let __sym0 = __pop_Term_22_3e_3d_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action25::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComparisonOperator(__nt), __end));
                21
            }
            41 => {
                // ComparisonOperator = ">" => ActionFn(26);
                let __sym0 = __pop_Term_22_3e_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action26::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComparisonOperator(__nt), __end));
                21
            }
            42 => {
                // ComparisonOperator = "<=" => ActionFn(27);
                let __sym0 = __pop_Term_22_3c_3d_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action27::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComparisonOperator(__nt), __end));
                21
            }
            43 => {
                // ComparisonOperator = "<" => ActionFn(28);
                let __sym0 = __pop_Term_22_3c_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action28::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComparisonOperator(__nt), __end));
                21
            }
            44 => {
                // ComparisonOperator = "=" => ActionFn(29);
                let __sym0 = __pop_Term_22_3d_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action29::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtComparisonOperator(__nt), __end));
                21
            }
            45 => {
                // ConditionStmt = Constant, StmCondition, "\\n" => ActionFn(123);
                let __sym2 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym1 = __pop_NtStmCondition(__symbols);
                let __sym0 = __pop_TermConstant(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action123::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtConditionStmt(__nt), __end));
                22
            }
            46 => {
                // ContentBlock = BlockType, "if", ValueExpression, "\\n" => ActionFn(147);
                let __sym3 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym2 = __pop_NtValueExpression(__symbols);
                let __sym1 = __pop_Term_22if_22(__symbols);
                let __sym0 = __pop_NtBlockType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action147::<>(file, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtContentBlock(__nt), __end));
                23
            }
            47 => {
                // ContentBlock = BlockType, "if", ValueExpression, "\\n", Statement+ => ActionFn(148);
                let __sym4 = __pop_NtStatement_2b(__symbols);
                let __sym3 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym2 = __pop_NtValueExpression(__symbols);
                let __sym1 = __pop_Term_22if_22(__symbols);
                let __sym0 = __pop_NtBlockType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym4.2.clone();
                let __nt = super::__action148::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4);
                let __states_len = __states.len();
                __states.truncate(__states_len - 5);
                __symbols.push((__start, __Symbol::NtContentBlock(__nt), __end));
                23
            }
            48 => {
                // ContentBlock = BlockType, "\\n" => ActionFn(149);
                let __sym1 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym0 = __pop_NtBlockType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action149::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtContentBlock(__nt), __end));
                23
            }
            49 => {
                // ContentBlock = BlockType, "\\n", Statement+ => ActionFn(150);
                let __sym2 = __pop_NtStatement_2b(__symbols);
                let __sym1 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym0 = __pop_NtBlockType(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action150::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtContentBlock(__nt), __end));
                23
            }
            50 => {
                // ContentBlock = "Mixin", Constant, "(", Comma<VarIdentifier>, ")", "\\n" => ActionFn(151);
                let __sym5 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym4 = __pop_Term_22_29_22(__symbols);
                let __sym3 = __pop_NtComma_3cVarIdentifier_3e(__symbols);
                let __sym2 = __pop_Term_22_28_22(__symbols);
                let __sym1 = __pop_TermConstant(__symbols);
                let __sym0 = __pop_Term_22Mixin_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = super::__action151::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                let __states_len = __states.len();
                __states.truncate(__states_len - 6);
                __symbols.push((__start, __Symbol::NtContentBlock(__nt), __end));
                23
            }
            51 => {
                // ContentBlock = "Mixin", Constant, "(", Comma<VarIdentifier>, ")", "\\n", Statement+ => ActionFn(152);
                let __sym6 = __pop_NtStatement_2b(__symbols);
                let __sym5 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym4 = __pop_Term_22_29_22(__symbols);
                let __sym3 = __pop_NtComma_3cVarIdentifier_3e(__symbols);
                let __sym2 = __pop_Term_22_28_22(__symbols);
                let __sym1 = __pop_TermConstant(__symbols);
                let __sym0 = __pop_Term_22Mixin_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym6.2.clone();
                let __nt = super::__action152::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
                let __states_len = __states.len();
                __states.truncate(__states_len - 7);
                __symbols.push((__start, __Symbol::NtContentBlock(__nt), __end));
                23
            }
            52 => {
                // ContentBlock = "Mixin", Constant, "\\n" => ActionFn(153);
                let __sym2 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym1 = __pop_TermConstant(__symbols);
                let __sym0 = __pop_Term_22Mixin_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action153::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtContentBlock(__nt), __end));
                23
            }
            53 => {
                // ContentBlock = "Mixin", Constant, "\\n", Statement+ => ActionFn(154);
                let __sym3 = __pop_NtStatement_2b(__symbols);
                let __sym2 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym1 = __pop_TermConstant(__symbols);
                let __sym0 = __pop_Term_22Mixin_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action154::<>(file, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtContentBlock(__nt), __end));
                23
            }
            54 => {
                // DefinitionBlock = VarDefinition => ActionFn(3);
                let __sym0 = __pop_NtVarDefinition(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action3::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtDefinitionBlock(__nt), __end));
                24
            }
            55 => {
                // DefinitionBlock = ImportBlock => ActionFn(4);
                let __sym0 = __pop_NtImportBlock(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action4::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtDefinitionBlock(__nt), __end));
                24
            }
            56 => {
                // DefinitionBlock* =  => ActionFn(65);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action65::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::NtDefinitionBlock_2a(__nt), __end));
                25
            }
            57 => {
                // DefinitionBlock* = DefinitionBlock+ => ActionFn(66);
                let __sym0 = __pop_NtDefinitionBlock_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action66::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtDefinitionBlock_2a(__nt), __end));
                25
            }
            58 => {
                // DefinitionBlock+ = DefinitionBlock => ActionFn(68);
                let __sym0 = __pop_NtDefinitionBlock(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action68::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtDefinitionBlock_2b(__nt), __end));
                26
            }
            59 => {
                // DefinitionBlock+ = DefinitionBlock+, DefinitionBlock => ActionFn(69);
                let __sym1 = __pop_NtDefinitionBlock(__symbols);
                let __sym0 = __pop_NtDefinitionBlock_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action69::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtDefinitionBlock_2b(__nt), __end));
                26
            }
            60 => {
                // ExpressionTerm = VarReference => ActionFn(41);
                let __sym0 = __pop_NtVarReference(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action41::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtExpressionTerm(__nt), __end));
                27
            }
            61 => {
                // ExpressionTerm = NumberLiteral => ActionFn(42);
                let __sym0 = __pop_NtNumberLiteral(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action42::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtExpressionTerm(__nt), __end));
                27
            }
            62 => {
                // ExpressionTerm = StrLiteral => ActionFn(43);
                let __sym0 = __pop_NtStrLiteral(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action43::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtExpressionTerm(__nt), __end));
                27
            }
            63 => {
                // ExpressionTerm = "(", ValueExpression, ")" => ActionFn(44);
                let __sym2 = __pop_Term_22_29_22(__symbols);
                let __sym1 = __pop_NtValueExpression(__symbols);
                let __sym0 = __pop_Term_22_28_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action44::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtExpressionTerm(__nt), __end));
                27
            }
            64 => {
                // FactorExpression = FactorExpression, "*", ExpressionTerm => ActionFn(38);
                let __sym2 = __pop_NtExpressionTerm(__symbols);
                let __sym1 = __pop_Term_22_2a_22(__symbols);
                let __sym0 = __pop_NtFactorExpression(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action38::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtFactorExpression(__nt), __end));
                28
            }
            65 => {
                // FactorExpression = FactorExpression, "/", ExpressionTerm => ActionFn(39);
                let __sym2 = __pop_NtExpressionTerm(__symbols);
                let __sym1 = __pop_Term_22_2f_22(__symbols);
                let __sym0 = __pop_NtFactorExpression(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action39::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtFactorExpression(__nt), __end));
                28
            }
            66 => {
                // FactorExpression = ExpressionTerm => ActionFn(40);
                let __sym0 = __pop_NtExpressionTerm(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action40::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtFactorExpression(__nt), __end));
                28
            }
            67 => {
                // Filter = ContentBlock => ActionFn(141);
                let __sym0 = __pop_NtContentBlock(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action141::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtFilter(__nt), __end));
                29
            }
            68 => {
                // Filter = DefinitionBlock+, ContentBlock => ActionFn(142);
                let __sym1 = __pop_NtContentBlock(__symbols);
                let __sym0 = __pop_NtDefinitionBlock_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action142::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtFilter(__nt), __end));
                29
            }
            69 => {
                // Filter = ContentBlock, AnyBlock+ => ActionFn(143);
                let __sym1 = __pop_NtAnyBlock_2b(__symbols);
                let __sym0 = __pop_NtContentBlock(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action143::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtFilter(__nt), __end));
                29
            }
            70 => {
                // Filter = DefinitionBlock+, ContentBlock, AnyBlock+ => ActionFn(144);
                let __sym2 = __pop_NtAnyBlock_2b(__symbols);
                let __sym1 = __pop_NtContentBlock(__symbols);
                let __sym0 = __pop_NtDefinitionBlock_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action144::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtFilter(__nt), __end));
                29
            }
            71 => {
                // Filter =  => ActionFn(145);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action145::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::NtFilter(__nt), __end));
                29
            }
            72 => {
                // Filter = DefinitionBlock+ => ActionFn(146);
                let __sym0 = __pop_NtDefinitionBlock_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action146::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtFilter(__nt), __end));
                29
            }
            73 => {
                // ImportBlock = "Import", RawStrLiteral, "\\n" => ActionFn(130);
                let __sym2 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym1 = __pop_NtRawStrLiteral(__symbols);
                let __sym0 = __pop_Term_22Import_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action130::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtImportBlock(__nt), __end));
                30
            }
            74 => {
                // MixinCall = "+", Constant, "(", Comma<Value>, ")", "\\n" => ActionFn(131);
                let __sym5 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym4 = __pop_Term_22_29_22(__symbols);
                let __sym3 = __pop_NtComma_3cValue_3e(__symbols);
                let __sym2 = __pop_Term_22_28_22(__symbols);
                let __sym1 = __pop_TermConstant(__symbols);
                let __sym0 = __pop_Term_22_2b_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = super::__action131::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                let __states_len = __states.len();
                __states.truncate(__states_len - 6);
                __symbols.push((__start, __Symbol::NtMixinCall(__nt), __end));
                31
            }
            75 => {
                // MixinCall = "+", Constant, "\\n" => ActionFn(132);
                let __sym2 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym1 = __pop_TermConstant(__symbols);
                let __sym0 = __pop_Term_22_2b_22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action132::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtMixinCall(__nt), __end));
                31
            }
            76 => {
                // NumberLiteral = Num => ActionFn(133);
                let __sym0 = __pop_TermNum(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action133::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtNumberLiteral(__nt), __end));
                32
            }
            77 => {
                // NumberLiteral = Float => ActionFn(134);
                let __sym0 = __pop_TermFloat(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action134::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtNumberLiteral(__nt), __end));
                32
            }
            78 => {
                // RawStrLiteral = QuotedStrLiteral => ActionFn(22);
                let __sym0 = __pop_TermQuotedStrLiteral(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action22::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtRawStrLiteral(__nt), __end));
                33
            }
            79 => {
                // RawStrLiteral = Constant => ActionFn(23);
                let __sym0 = __pop_TermConstant(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action23::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtRawStrLiteral(__nt), __end));
                33
            }
            80 => {
                // SetValueStmt = Constant, Value, "\\n" => ActionFn(135);
                let __sym2 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym1 = __pop_NtValue(__symbols);
                let __sym0 = __pop_TermConstant(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action135::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtSetValueStmt(__nt), __end));
                34
            }
            81 => {
                // Statement = SetValueStmt => ActionFn(18);
                let __sym0 = __pop_NtSetValueStmt(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action18::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtStatement(__nt), __end));
                35
            }
            82 => {
                // Statement = ConditionStmt => ActionFn(19);
                let __sym0 = __pop_NtConditionStmt(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action19::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtStatement(__nt), __end));
                35
            }
            83 => {
                // Statement = MixinCall => ActionFn(20);
                let __sym0 = __pop_NtMixinCall(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action20::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtStatement(__nt), __end));
                35
            }
            84 => {
                // Statement = VarDefinition => ActionFn(21);
                let __sym0 = __pop_NtVarDefinition(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action21::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtStatement(__nt), __end));
                35
            }
            85 => {
                // Statement* =  => ActionFn(57);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action57::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::NtStatement_2a(__nt), __end));
                36
            }
            86 => {
                // Statement* = Statement+ => ActionFn(58);
                let __sym0 = __pop_NtStatement_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action58::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtStatement_2a(__nt), __end));
                36
            }
            87 => {
                // Statement+ = Statement => ActionFn(72);
                let __sym0 = __pop_NtStatement(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action72::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtStatement_2b(__nt), __end));
                37
            }
            88 => {
                // Statement+ = Statement+, Statement => ActionFn(73);
                let __sym1 = __pop_NtStatement(__symbols);
                let __sym0 = __pop_NtStatement_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action73::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtStatement_2b(__nt), __end));
                37
            }
            89 => {
                // StmCondition = ComparisonOperator, ValueExpression => ActionFn(16);
                let __sym1 = __pop_NtValueExpression(__symbols);
                let __sym0 = __pop_NtComparisonOperator(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action16::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtStmCondition(__nt), __end));
                38
            }
            90 => {
                // StrLiteral = RawStrLiteral => ActionFn(136);
                let __sym0 = __pop_NtRawStrLiteral(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action136::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtStrLiteral(__nt), __end));
                39
            }
            91 => {
                // SumExpression = SumExpression, "+", FactorExpression => ActionFn(35);
                let __sym2 = __pop_NtFactorExpression(__symbols);
                let __sym1 = __pop_Term_22_2b_22(__symbols);
                let __sym0 = __pop_NtSumExpression(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action35::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtSumExpression(__nt), __end));
                40
            }
            92 => {
                // SumExpression = SumExpression, "-", FactorExpression => ActionFn(36);
                let __sym2 = __pop_NtFactorExpression(__symbols);
                let __sym1 = __pop_Term_22_2d_22(__symbols);
                let __sym0 = __pop_NtSumExpression(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action36::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtSumExpression(__nt), __end));
                40
            }
            93 => {
                // SumExpression = FactorExpression => ActionFn(37);
                let __sym0 = __pop_NtFactorExpression(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action37::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtSumExpression(__nt), __end));
                40
            }
            94 => {
                // Value = ValueExpression+ => ActionFn(32);
                let __sym0 = __pop_NtValueExpression_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action32::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtValue(__nt), __end));
                41
            }
            95 => {
                // Value? = Value => ActionFn(79);
                let __sym0 = __pop_NtValue(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action79::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtValue_3f(__nt), __end));
                42
            }
            96 => {
                // Value? =  => ActionFn(80);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action80::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::NtValue_3f(__nt), __end));
                42
            }
            97 => {
                // ValueExpression = ValueExpression, ComparisonOperator, SumExpression => ActionFn(33);
                let __sym2 = __pop_NtSumExpression(__symbols);
                let __sym1 = __pop_NtComparisonOperator(__symbols);
                let __sym0 = __pop_NtValueExpression(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym2.2.clone();
                let __nt = super::__action33::<>(file, __sym0, __sym1, __sym2);
                let __states_len = __states.len();
                __states.truncate(__states_len - 3);
                __symbols.push((__start, __Symbol::NtValueExpression(__nt), __end));
                43
            }
            98 => {
                // ValueExpression = SumExpression => ActionFn(34);
                let __sym0 = __pop_NtSumExpression(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action34::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtValueExpression(__nt), __end));
                43
            }
            99 => {
                // ValueExpression+ = ValueExpression => ActionFn(47);
                let __sym0 = __pop_NtValueExpression(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action47::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtValueExpression_2b(__nt), __end));
                44
            }
            100 => {
                // ValueExpression+ = ValueExpression+, ValueExpression => ActionFn(48);
                let __sym1 = __pop_NtValueExpression(__symbols);
                let __sym0 = __pop_NtValueExpression_2b(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym1.2.clone();
                let __nt = super::__action48::<>(file, __sym0, __sym1);
                let __states_len = __states.len();
                __states.truncate(__states_len - 2);
                __symbols.push((__start, __Symbol::NtValueExpression_2b(__nt), __end));
                44
            }
            101 => {
                // VarDefinition = VarIdentifier, "=", Value, "\\n" => ActionFn(137);
                let __sym3 = __pop_Term_22_5c_5cn_22(__symbols);
                let __sym2 = __pop_NtValue(__symbols);
                let __sym1 = __pop_Term_22_3d_22(__symbols);
                let __sym0 = __pop_TermVarIdentifier(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = super::__action137::<>(file, __sym0, __sym1, __sym2, __sym3);
                let __states_len = __states.len();
                __states.truncate(__states_len - 4);
                __symbols.push((__start, __Symbol::NtVarDefinition(__nt), __end));
                45
            }
            102 => {
                // VarIdentifier? = VarIdentifier => ActionFn(74);
                let __sym0 = __pop_TermVarIdentifier(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action74::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtVarIdentifier_3f(__nt), __end));
                46
            }
            103 => {
                // VarIdentifier? =  => ActionFn(75);
                let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
                let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
                let __nt = super::__action75::<>(file, &__start, &__end);
                let __states_len = __states.len();
                __states.truncate(__states_len - 0);
                __symbols.push((__start, __Symbol::NtVarIdentifier_3f(__nt), __end));
                46
            }
            104 => {
                // VarReference = VarIdentifier => ActionFn(138);
                let __sym0 = __pop_TermVarIdentifier(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action138::<>(file, __sym0);
                let __states_len = __states.len();
                __states.truncate(__states_len - 1);
                __symbols.push((__start, __Symbol::NtVarReference(__nt), __end));
                47
            }
            105 => {
                // __Filter = Filter => ActionFn(0);
                let __sym0 = __pop_NtFilter(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(file, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __state = *__states.last().unwrap() as usize;
        let __next_state = __GOTO[__state * 49 + __nonterminal] - 1;
        __states.push(__next_state);
        None
    }
    fn __pop_Term_22_28_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_28_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_29_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_29_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_2a_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2a_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_2b_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2b_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_2c_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2c_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_2d_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2d_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_2f_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_2f_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_3c_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3c_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_3c_3d_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3c_3d_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_3d_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3d_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_3e_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3e_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_3e_3d_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_3e_3d_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22False_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22False_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22Hide_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22Hide_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22Import_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22Import_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22Mixin_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22Mixin_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22Show_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22Show_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22True_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22True_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22_5c_5cn_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22_5c_5cn_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Term_22if_22<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Tok, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Term_22if_22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_TermConstant<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, String, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermConstant(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_TermFloat<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, f64, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermFloat(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_TermNum<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, i64, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermNum(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_TermQuotedStrLiteral<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, String, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermQuotedStrLiteral(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_TermVarIdentifier<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, String, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::TermVarIdentifier(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Termerror<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, __lalrpop_util::ErrorRecovery<TokenLocation, Tok, char>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Termerror(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29_3f<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::option::Option<Vec<Node>>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_22_28_22_20_3cComma_3cValue_3e_3e_20_22_29_22_29_3f(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Vec<String>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29_3f<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::option::Option<Vec<String>>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_22_28_22_20_3cComma_3cVarIdentifier_3e_3e_20_22_29_22_29_3f(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_22if_22_20_3cValueExpression_3e_29<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_22if_22_20_3cValueExpression_3e_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_22if_22_20_3cValueExpression_3e_29_3f<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::option::Option<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_22if_22_20_3cValueExpression_3e_29_3f(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_3cValue_3e_20_22_2c_22_29<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cValue_3e_20_22_2c_22_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_3cValue_3e_20_22_2c_22_29_2a<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cValue_3e_20_22_2c_22_29_2a(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_3cValue_3e_20_22_2c_22_29_2b<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cValue_3e_20_22_2c_22_29_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_3cVarIdentifier_3e_20_22_2c_22_29<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, String, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cVarIdentifier_3e_20_22_2c_22_29(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2a<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<String>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2a(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<String>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_28_3cVarIdentifier_3e_20_22_2c_22_29_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_40L<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, TokenLocation, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_40L(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt_40R<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, TokenLocation, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt_40R(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtAnyBlock<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtAnyBlock(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtAnyBlock_2a<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtAnyBlock_2a(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtAnyBlock_2b<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtAnyBlock_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtBlockType<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, BlockType, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtBlockType(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtColor<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtColor(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtComma_3cValue_3e<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtComma_3cValue_3e(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtComma_3cVarIdentifier_3e<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Vec<String>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtComma_3cVarIdentifier_3e(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtComparisonOperator<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, stm::ComparisonOperator, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtComparisonOperator(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtConditionStmt<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtConditionStmt(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtContentBlock<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtContentBlock(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtDefinitionBlock<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtDefinitionBlock(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtDefinitionBlock_2a<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtDefinitionBlock_2a(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtDefinitionBlock_2b<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtDefinitionBlock_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtExpressionTerm<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtExpressionTerm(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtFactorExpression<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtFactorExpression(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtFilter<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtFilter(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtImportBlock<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtImportBlock(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtMixinCall<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtMixinCall(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtNumberLiteral<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtNumberLiteral(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtRawStrLiteral<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, String, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtRawStrLiteral(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtSetValueStmt<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtSetValueStmt(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtStatement<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtStatement(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtStatement_2a<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtStatement_2a(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtStatement_2b<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtStatement_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtStmCondition<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, stm::Condition, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtStmCondition(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtStrLiteral<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtStrLiteral(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtSumExpression<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtSumExpression(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtValue<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtValue(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtValue_3f<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::option::Option<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtValue_3f(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtValueExpression<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtValueExpression(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtValueExpression_2b<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::vec::Vec<Node>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtValueExpression_2b(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtVarDefinition<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtVarDefinition(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtVarIdentifier_3f<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, ::std::option::Option<String>, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtVarIdentifier_3f(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_NtVarReference<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::NtVarReference(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Nt____Filter<
    >(
        __symbols: &mut ::std::vec::Vec<(TokenLocation,__Symbol<>,TokenLocation)>
    ) -> (TokenLocation, Node, TokenLocation) {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Nt____Filter(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
}
pub use self::__parse__Filter::parse_Filter;

#[allow(unused_variables)]
pub fn __action0<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action1<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, defs, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, first, _): (TokenLocation, Node, TokenLocation),
    (_, rest, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    {
        let mut nodes = defs;
        nodes.push(first);
        nodes.extend(rest);
        Node::Filter(Filter {
            nodes: nodes,
            location: AstLocation::new(l, r, file.clone())
        })
    }
}

#[allow(unused_variables)]
pub fn __action2<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, defs, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    Node::Filter(
        Filter {
            nodes: defs,
            location: AstLocation::new(l, r, file.clone())
        }
    )
}

#[allow(unused_variables)]
pub fn __action3<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action4<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action5<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, path, _): (TokenLocation, String, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Node
{
    Node::Import(
    ImportStatement {
        path: path,
        location: AstLocation::new(l, r, file.clone())
    }
)
}

#[allow(unused_variables)]
pub fn __action6<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Tok, TokenLocation),
) -> BlockType
{
    BlockType::Show
}

#[allow(unused_variables)]
pub fn __action7<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Tok, TokenLocation),
) -> BlockType
{
    BlockType::Hide
}

#[allow(unused_variables)]
pub fn __action8<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, t, _): (TokenLocation, BlockType, TokenLocation),
    (_, condition, _): (TokenLocation, ::std::option::Option<Node>, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, stmts, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    Node::Block(
        Block {
            nodes: stmts,
            variant: t,
            location: AstLocation::new(l, r, file.clone()),
            condition: None
        }
    )
}

#[allow(unused_variables)]
pub fn __action9<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, name, _): (TokenLocation, String, TokenLocation),
    (_, args, _): (TokenLocation, ::std::option::Option<Vec<String>>, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, instructions, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    {
        let params = args
            .unwrap_or(vec![])
            .iter()
            .map(|param_name| ast::mixin::Param { name: param_name.clone(), default: None })
            .collect();
        Node::Mixin(
            ast::mixin::Mixin{
                name: name,
                parameters: params,
                statements: instructions,
                location: AstLocation::new(l, r, file.clone())
            }
        )
    }
}

#[allow(unused_variables)]
pub fn __action10<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action11<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action12<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, id, _): (TokenLocation, String, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, v, _): (TokenLocation, Node, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Node
{
    Node::VarDefinition(
        VarDefinition {
            identifier: id,
            values: Box::new(v),
            location: AstLocation::new(l, r, file.clone())
        }
    )
}

#[allow(unused_variables)]
pub fn __action13<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, ident, _): (TokenLocation, String, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    Node::Value(ExpressionValue::Var(
        VarReference {
            identifier: ident,
            location: AstLocation::new(l, r, file.clone())
        }
    ))
}

#[allow(unused_variables)]
pub fn __action14<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, n, _): (TokenLocation, String, TokenLocation),
    (_, val, _): (TokenLocation, Node, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Node
{
    Node::SetValueStmt(
        stm::SetValueStatement {
            name: n,
            values: Box::new(val),
            location: AstLocation::new(l, r, file.clone())
        }
    )
}

#[allow(unused_variables)]
pub fn __action15<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, n, _): (TokenLocation, String, TokenLocation),
    (_, cond, _): (TokenLocation, stm::Condition, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Node
{
    Node::ConditionStmt(
        stm::ConditionStatement {
            name: n,
            condition: cond,
            location: AstLocation::new(l, r, file.clone())
        }
    )
}

#[allow(unused_variables)]
pub fn __action16<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, op, _): (TokenLocation, stm::ComparisonOperator, TokenLocation),
    (_, v, _): (TokenLocation, Node, TokenLocation),
) -> stm::Condition
{
    stm::Condition { value: Box::new(v), operator: op }
}

#[allow(unused_variables)]
pub fn __action17<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, n, _): (TokenLocation, String, TokenLocation),
    (_, params, _): (TokenLocation, ::std::option::Option<Vec<Node>>, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Node
{
    Node::MixinCall(
        ast::mixin::MixinCall {
            name: n,
            parameters: params.unwrap_or(vec![]),
            location: AstLocation::new(l, r, file.clone())
        }
    )
}

#[allow(unused_variables)]
pub fn __action18<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action19<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action20<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action21<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action22<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, String, TokenLocation),
) -> String
{
    String::from(__0)
}

#[allow(unused_variables)]
pub fn __action23<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, String, TokenLocation),
) -> String
{
    String::from(__0)
}

#[allow(unused_variables)]
pub fn __action24<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, s, _): (TokenLocation, String, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    Node::Value(
        ExpressionValue::String(s)
    )
}

#[allow(unused_variables)]
pub fn __action25<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Tok, TokenLocation),
) -> stm::ComparisonOperator
{
    stm::ComparisonOperator::Gte
}

#[allow(unused_variables)]
pub fn __action26<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Tok, TokenLocation),
) -> stm::ComparisonOperator
{
    stm::ComparisonOperator::Gt
}

#[allow(unused_variables)]
pub fn __action27<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Tok, TokenLocation),
) -> stm::ComparisonOperator
{
    stm::ComparisonOperator::Lte
}

#[allow(unused_variables)]
pub fn __action28<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Tok, TokenLocation),
) -> stm::ComparisonOperator
{
    stm::ComparisonOperator::Lt
}

#[allow(unused_variables)]
pub fn __action29<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Tok, TokenLocation),
) -> stm::ComparisonOperator
{
    stm::ComparisonOperator::Eql
}

#[allow(unused_variables)]
pub fn __action30<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, num, _): (TokenLocation, i64, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    Node::Expression(
        ExpressionNode::Val(ExpressionValue::Int(num), AstLocation::new(l, r, file.clone()))
    )
}

#[allow(unused_variables)]
pub fn __action31<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, num, _): (TokenLocation, f64, TokenLocation),
    (_, r, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    Node::Expression(
        ExpressionNode::Val(ExpressionValue::Decimal(num), AstLocation::new(l, r, file.clone()))
    )
}

#[allow(unused_variables)]
pub fn __action32<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, values, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    {
        if values.len() == 1 {
            values[0].clone()
        } else {
            Node::Value(ExpressionValue::List(values))
        }
    }
}

#[allow(unused_variables)]
pub fn __action33<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, Node, TokenLocation),
    (_, op, _): (TokenLocation, stm::ComparisonOperator, TokenLocation),
    (_, r, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    Node::Expression(
        ExpressionNode::Op(Box::new(l), ExpressionOperation::from(op), Box::new(r))
    )
}

#[allow(unused_variables)]
pub fn __action34<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action35<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, Node, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, r, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    Node::Expression(
        ExpressionNode::Op(Box::new(l), ExpressionOperation::Add, Box::new(r))
    )
}

#[allow(unused_variables)]
pub fn __action36<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, Node, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, r, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    Node::Expression(
        ExpressionNode::Op(Box::new(l), ExpressionOperation::Sub, Box::new(r))
    )
}

#[allow(unused_variables)]
pub fn __action37<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action38<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, Node, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, r, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    Node::Expression(
        ExpressionNode::Op(Box::new(l), ExpressionOperation::Mul, Box::new(r))
    )
}

#[allow(unused_variables)]
pub fn __action39<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, l, _): (TokenLocation, Node, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, r, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    Node::Expression(
        ExpressionNode::Op(Box::new(l), ExpressionOperation::Div, Box::new(r))
    )
}

#[allow(unused_variables)]
pub fn __action40<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action41<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action42<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action43<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action44<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, __0, _): (TokenLocation, Node, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Node
{
    __0
}

#[allow(unused_variables)]
pub fn __action45<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, r, _): (TokenLocation, Node, TokenLocation),
    (_, g, _): (TokenLocation, Node, TokenLocation),
    (_, b, _): (TokenLocation, Node, TokenLocation),
    (_, a, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    Node::Color(ast::color::Color {
        r: Box::new(r),
        g: Box::new(g),
        b: Box::new(b),
        a: Box::new(a)
    })
}

#[allow(unused_variables)]
pub fn __action46<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, left, _): (TokenLocation, TokenLocation, TokenLocation),
    (_, r, _): (TokenLocation, Node, TokenLocation),
    (_, g, _): (TokenLocation, Node, TokenLocation),
    (_, b, _): (TokenLocation, Node, TokenLocation),
    (_, right, _): (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    Node::Color(ast::color::Color {
        r: Box::new(r),
        g: Box::new(g),
        b: Box::new(b),
        a: Box::new(Node::Expression(
            ExpressionNode::Val(ExpressionValue::Int(255),
            AstLocation::new(left, right, file.clone())
        )))
    })
}

#[allow(unused_variables)]
pub fn __action47<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    vec![__0]
}

#[allow(unused_variables)]
pub fn __action48<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, e, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
pub fn __action49<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Vec<Node>, TokenLocation),
) -> ::std::option::Option<Vec<Node>>
{
    Some(__0)
}

#[allow(unused_variables)]
pub fn __action50<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::option::Option<Vec<Node>>
{
    None
}

#[allow(unused_variables)]
pub fn __action51<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, __0, _): (TokenLocation, Vec<Node>, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Vec<Node>
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action52<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, e, _): (TokenLocation, ::std::option::Option<Node>, TokenLocation),
) -> Vec<Node>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
pub fn __action53<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Vec<String>, TokenLocation),
) -> ::std::option::Option<Vec<String>>
{
    Some(__0)
}

#[allow(unused_variables)]
pub fn __action54<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::option::Option<Vec<String>>
{
    None
}

#[allow(unused_variables)]
pub fn __action55<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, __0, _): (TokenLocation, Vec<String>, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Vec<String>
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action56<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<String>, TokenLocation),
    (_, e, _): (TokenLocation, ::std::option::Option<String>, TokenLocation),
) -> Vec<String>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
pub fn __action57<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::vec::Vec<Node>
{
    vec![]
}

#[allow(unused_variables)]
pub fn __action58<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    v
}

#[allow(unused_variables)]
pub fn __action59<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> ::std::option::Option<Node>
{
    Some(__0)
}

#[allow(unused_variables)]
pub fn __action60<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::option::Option<Node>
{
    None
}

#[allow(unused_variables)]
pub fn __action61<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, _, _): (TokenLocation, Tok, TokenLocation),
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action62<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> TokenLocation
{
    __lookbehind.clone()
}

#[allow(unused_variables)]
pub fn __action63<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::vec::Vec<Node>
{
    vec![]
}

#[allow(unused_variables)]
pub fn __action64<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    v
}

#[allow(unused_variables)]
pub fn __action65<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::vec::Vec<Node>
{
    vec![]
}

#[allow(unused_variables)]
pub fn __action66<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    v
}

#[allow(unused_variables)]
pub fn __action67<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> TokenLocation
{
    __lookahead.clone()
}

#[allow(unused_variables)]
pub fn __action68<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    vec![__0]
}

#[allow(unused_variables)]
pub fn __action69<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, e, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
pub fn __action70<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    vec![__0]
}

#[allow(unused_variables)]
pub fn __action71<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, e, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
pub fn __action72<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    vec![__0]
}

#[allow(unused_variables)]
pub fn __action73<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, e, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
pub fn __action74<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, String, TokenLocation),
) -> ::std::option::Option<String>
{
    Some(__0)
}

#[allow(unused_variables)]
pub fn __action75<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::option::Option<String>
{
    None
}

#[allow(unused_variables)]
pub fn __action76<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::vec::Vec<String>
{
    vec![]
}

#[allow(unused_variables)]
pub fn __action77<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<String>, TokenLocation),
) -> ::std::vec::Vec<String>
{
    v
}

#[allow(unused_variables)]
pub fn __action78<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, String, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> String
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action79<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> ::std::option::Option<Node>
{
    Some(__0)
}

#[allow(unused_variables)]
pub fn __action80<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::option::Option<Node>
{
    None
}

#[allow(unused_variables)]
pub fn __action81<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> ::std::vec::Vec<Node>
{
    vec![]
}

#[allow(unused_variables)]
pub fn __action82<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    v
}

#[allow(unused_variables)]
pub fn __action83<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
    (_, _, _): (TokenLocation, Tok, TokenLocation),
) -> Node
{
    (__0)
}

#[allow(unused_variables)]
pub fn __action84<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    vec![__0]
}

#[allow(unused_variables)]
pub fn __action85<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    (_, e, _): (TokenLocation, Node, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
pub fn __action86<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, __0, _): (TokenLocation, String, TokenLocation),
) -> ::std::vec::Vec<String>
{
    vec![__0]
}

#[allow(unused_variables)]
pub fn __action87<
    'a,
>(
    file: &'a Rc<PathBuf>,
    (_, v, _): (TokenLocation, ::std::vec::Vec<String>, TokenLocation),
    (_, e, _): (TokenLocation, String, TokenLocation),
) -> ::std::vec::Vec<String>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
pub fn __action88<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, Vec<Node>, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> ::std::option::Option<Vec<Node>>
{
    let __start0 = __0.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action51(
        file,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action89<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, TokenLocation, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, String, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
    __4: (TokenLocation, Vec<Node>, TokenLocation),
    __5: (TokenLocation, Tok, TokenLocation),
    __6: (TokenLocation, TokenLocation, TokenLocation),
    __7: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __3.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action88(
        file,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        file,
        __0,
        __1,
        __2,
        __temp0,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
pub fn __action90<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, TokenLocation, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, String, TokenLocation),
    __3: (TokenLocation, TokenLocation, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action50(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        file,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
pub fn __action91<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, Vec<String>, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> ::std::option::Option<Vec<String>>
{
    let __start0 = __0.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action55(
        file,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action53(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action92<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, TokenLocation, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, String, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
    __4: (TokenLocation, Vec<String>, TokenLocation),
    __5: (TokenLocation, Tok, TokenLocation),
    __6: (TokenLocation, Tok, TokenLocation),
    __7: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __8: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __3.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action91(
        file,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action9(
        file,
        __0,
        __1,
        __2,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
pub fn __action93<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, TokenLocation, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, String, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
    __4: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __5: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action54(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action9(
        file,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
pub fn __action94<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
) -> ::std::option::Option<Node>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action61(
        file,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action59(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action95<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, TokenLocation, TokenLocation),
    __1: (TokenLocation, BlockType, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, Node, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
    __5: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __6: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __2.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action94(
        file,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action8(
        file,
        __0,
        __1,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
pub fn __action96<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, TokenLocation, TokenLocation),
    __1: (TokenLocation, BlockType, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __4: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action60(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action8(
        file,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
pub fn __action97<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Node, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action83(
        file,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action84(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action98<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> ::std::vec::Vec<Node>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action83(
        file,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action99<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::option::Option<Node>, TokenLocation),
) -> Vec<Node>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        file,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
pub fn __action100<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, ::std::option::Option<Node>, TokenLocation),
) -> Vec<Node>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action82(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        file,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action101<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
) -> ::std::vec::Vec<String>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action78(
        file,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action102<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<String>, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> ::std::vec::Vec<String>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action78(
        file,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action103<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::option::Option<String>, TokenLocation),
) -> Vec<String>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action76(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        file,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
pub fn __action104<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<String>, TokenLocation),
    __1: (TokenLocation, ::std::option::Option<String>, TokenLocation),
) -> Vec<String>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action77(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        file,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action105<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Node, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, Node, TokenLocation),
    __3: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
pub fn __action106<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, stm::Condition, TokenLocation),
    __2: (TokenLocation, TokenLocation, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
pub fn __action107<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, BlockType, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, Node, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
    __4: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __5: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action95(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
pub fn __action108<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, BlockType, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __3: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
pub fn __action109<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, Vec<String>, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
    __5: (TokenLocation, Tok, TokenLocation),
    __6: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __7: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
pub fn __action110<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __4: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
pub fn __action111<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __3: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
pub fn __action112<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action113<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, TokenLocation, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action5(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
pub fn __action114<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, Vec<Node>, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
    __5: (TokenLocation, TokenLocation, TokenLocation),
    __6: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
pub fn __action115<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, TokenLocation, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action90(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
pub fn __action116<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, i64, TokenLocation),
    __1: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action30(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action117<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, f64, TokenLocation),
    __1: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action31(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action118<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, TokenLocation, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
pub fn __action119<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action120<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, Node, TokenLocation),
    __3: (TokenLocation, TokenLocation, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action12(
        file,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
pub fn __action121<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, TokenLocation, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action67(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action122<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Node, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, Node, TokenLocation),
) -> Node
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action105(
        file,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action123<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, stm::Condition, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action106(
        file,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
pub fn __action124<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, BlockType, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, Node, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
    __4: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __4.2.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action107(
        file,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action125<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, BlockType, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action108(
        file,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action126<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, Vec<String>, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
    __5: (TokenLocation, Tok, TokenLocation),
    __6: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __6.2.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action109(
        file,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action127<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action110(
        file,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action128<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action111(
        file,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action129<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action112(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action130<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action113(
        file,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
pub fn __action131<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, Vec<Node>, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
    __5: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action114(
        file,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
pub fn __action132<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action115(
        file,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
pub fn __action133<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, i64, TokenLocation),
) -> Node
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action116(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action134<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, f64, TokenLocation),
) -> Node
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action117(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action135<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        file,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
pub fn __action136<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
) -> Node
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action119(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action137<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, Node, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        file,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
pub fn __action138<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
) -> Node
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action62(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action139<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
) -> Node
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action63(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        file,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action140<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action64(
        file,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        file,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action141<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Node, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action65(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action139(
        file,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
pub fn __action142<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action66(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action139(
        file,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action143<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Node, TokenLocation),
    __1: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action65(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
pub fn __action144<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
    __2: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action66(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        file,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
pub fn __action145<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> Node
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action65(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action129(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action146<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action66(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action129(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action147<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, BlockType, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, Node, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action57(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action124(
        file,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action148<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, BlockType, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, Node, TokenLocation),
    __3: (TokenLocation, Tok, TokenLocation),
    __4: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action58(
        file,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action124(
        file,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action149<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, BlockType, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action57(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        file,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action150<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, BlockType, TokenLocation),
    __1: (TokenLocation, Tok, TokenLocation),
    __2: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action58(
        file,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        file,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action151<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, Vec<String>, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
    __5: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action57(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        file,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action152<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, Vec<String>, TokenLocation),
    __4: (TokenLocation, Tok, TokenLocation),
    __5: (TokenLocation, Tok, TokenLocation),
    __6: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __6.0.clone();
    let __end0 = __6.2.clone();
    let __temp0 = __action58(
        file,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        file,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action153<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
) -> Node
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action57(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        file,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action154<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Tok, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
    __2: (TokenLocation, Tok, TokenLocation),
    __3: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Node
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action58(
        file,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        file,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action155<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, Node, TokenLocation),
) -> Vec<Node>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action79(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action99(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action156<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> Vec<Node>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action99(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action157<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
    __1: (TokenLocation, Node, TokenLocation),
) -> Vec<Node>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action79(
        file,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action100(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action158<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<Node>, TokenLocation),
) -> Vec<Node>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action100(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action159<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, String, TokenLocation),
) -> Vec<String>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action74(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action103(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action160<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __lookbehind: &TokenLocation,
    __lookahead: &TokenLocation,
) -> Vec<String>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action75(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action103(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action161<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<String>, TokenLocation),
    __1: (TokenLocation, String, TokenLocation),
) -> Vec<String>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action74(
        file,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
pub fn __action162<
    'a,
>(
    file: &'a Rc<PathBuf>,
    __0: (TokenLocation, ::std::vec::Vec<String>, TokenLocation),
) -> Vec<String>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action75(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        file,
        __0,
        __temp0,
    )
}

pub trait __ToTriple<'a, > {
    type Error;
    fn to_triple(value: Self) -> Result<(TokenLocation,Tok,TokenLocation),Self::Error>;
}

impl<'a, > __ToTriple<'a, > for (TokenLocation, Tok, TokenLocation) {
    type Error = char;
    fn to_triple(value: Self) -> Result<(TokenLocation,Tok,TokenLocation),char> {
        Ok(value)
    }
}
impl<'a, > __ToTriple<'a, > for Result<(TokenLocation, Tok, TokenLocation),char> {
    type Error = char;
    fn to_triple(value: Self) -> Result<(TokenLocation,Tok,TokenLocation),char> {
        value
    }
}
